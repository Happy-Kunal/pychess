from __future__ import annotations
from typing import Protocol, Type

import pygame

from chess_enums import ChessPieceColor, GameMode
from move import Move

class IChessPiece(Protocol):
    def get_row(self) -> int:...
    def get_col(self) -> int:...
    def get_color(self) -> ChessPieceColor:...
    def set_position(self, x: int, y: int):...
    def get_points(self) -> int:...
    def is_king(self):...
    def get_moves(self, board: IBoard, board_analyzer: IBoardAnalyzer) -> set[Move]:...
    def get_image(self) -> pygame.SurfaceType | None:...


class IBoard(Protocol):
    def make_move(self, x1: int, y1: int, x2: int, y2: int):...
    def unmake_move(self):...
    def get_piece_at(self, x: int, y: int) -> IChessPiece | None:...
    def is_valid_position(self, x: int, y: int) -> bool:...
    def is_position_empty(self, x: int, y: int) -> bool:...
    def get_king(self, color: ChessPieceColor) -> IChessPiece:...
    def get_pieces(self, color: ChessPieceColor) -> set[IChessPiece]:...


class IBoardAnalyzer(Protocol):
    @classmethod
    def are_friends(cls, piece1: IChessPiece, piece2: IChessPiece) -> bool:...

    @classmethod
    def are_opponents(cls, piece1: IChessPiece, piece2: IChessPiece) -> bool:...
    
    @classmethod
    def is_there_any_threat_to_king(cls, color: ChessPieceColor, board: IBoard) -> bool:...

    @classmethod
    def filter_moves(cls, color: ChessPieceColor, moves: set[Move], board: IBoard) -> set[Move]:...
    
    @classmethod
    def get_all_valid_moves(cls, color: ChessPieceColor, board: IBoard) -> set[Move]:...
    
    @classmethod
    def has_moves(cls, color: ChessPieceColor, board: IBoard):...
    
    @classmethod
    def insufficient_material(cls, board: IBoard) -> bool:...
    
    @classmethod
    def is_winner(cls, color: ChessPieceColor, board: IBoard) -> bool:...
    
    @classmethod
    def is_draw(cls, board: IBoard) -> bool:...
    
    @classmethod
    def is_terminal(cls, board: IBoard) -> bool:...
    
    @classmethod
    def evaluate_delta_points_for_given_board(cls, game_mode: GameMode, board: IBoard) -> int:...

    @classmethod
    def evaluate_board(cls, game_mode: GameMode, board: IBoard) -> int:...



